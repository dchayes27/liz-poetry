{"ast":null,"code":"import { syllable } from 'syllable';\nexport const capitalize = str => str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\nexport const validatePoem = (style, poemText) => {\n  const lines = poemText.trim().split(\"\\n\").filter(line => line.trim() !== \"\");\n  switch (style) {\n    case \"Haiku\":\n      if (lines.length !== 3) {\n        return \"A haiku should have exactly three lines.\";\n      }\n      const syllableCounts = lines.map(line => syllable(line));\n      if (syllableCounts[0] !== 5 || syllableCounts[1] !== 7 || syllableCounts[2] !== 5) {\n        return \"Haiku lines should have 5, 7, and 5 syllables respectively.\";\n      }\n      return \"This poem structure looks like a Haiku!\";\n    case \"Sonnet\":\n      if (lines.length !== 14) {\n        return \"A sonnet should have exactly 14 lines.\";\n      }\n      // Add more sophisticated validation for iambic pentameter if desired\n      return \"This poem has the correct number of lines for a Sonnet.\";\n    case \"Limerick\":\n      if (lines.length !== 5) {\n        return \"A limerick should have exactly 5 lines.\";\n      }\n      // Add rhyme scheme validation if desired\n      return \"This poem has the correct number of lines for a Limerick.\";\n    default:\n      return `\"${style}\" has no strict rules, write freely!`;\n  }\n};\nexport const calculateDoomScale = poem => {\n  if (!poem) return 0;\n  const words = poem.toLowerCase().split(/\\s+/).filter(word => word !== \"\");\n  if (words.length === 0) return 0;\n\n  // Calculate various factors that contribute to \"doom\"\n  const darkWords = new Set(['dark', 'death', 'doom', 'gloom', 'night', 'shadow', 'black', 'abyss', 'void', 'lost']);\n  const darkWordCount = words.filter(word => darkWords.has(word)).length;\n\n  // Rhyme detection\n  let rhymeScore = 0;\n  const lastTwoLetters = words.map(word => word.slice(-2));\n  for (let i = 0; i < lastTwoLetters.length; i++) {\n    for (let j = i + 1; j < lastTwoLetters.length; j++) {\n      if (lastTwoLetters[i] && lastTwoLetters[j] && lastTwoLetters[i] === lastTwoLetters[j]) {\n        rhymeScore++;\n      }\n    }\n  }\n\n  // Word variety (repetition adds to doom)\n  const wordVarietyScore = 1 - new Set(words).size / words.length;\n\n  // Punctuation analysis (more exclamation/question marks = more dramatic = more doom)\n  const dramaticPunctuation = (poem.match(/[!?]/g) || []).length;\n\n  // Calculate final doom score\n  const darkWordFactor = darkWordCount / words.length * 40;\n  const rhymeFactor = rhymeScore / words.length * 20;\n  const varietyFactor = wordVarietyScore * 20;\n  const punctuationFactor = Math.min(dramaticPunctuation * 5, 20);\n  const doomScale = darkWordFactor + rhymeFactor + varietyFactor + punctuationFactor;\n  return Math.min(100, Math.max(0, Math.round(doomScale)));\n};\nexport const POEM_STYLES = [\"Haiku\", \"Sonnet\", \"Limerick\", \"Free Verse\", \"Ode\", \"Villanelle\", \"Elegy\", \"Ballad\", \"Epigram\", \"Acrostic\"];\nexport const POEM_PROMPTS = [\"Choose one of your five senses and write a poem that focuses on it.\", \"Write a poem inspired by a color.\", \"Write about something that happened to you this week.\", \"Write a poem inspired by your favorite song.\", \"Write about a lesson you recently learned.\", \"Write a poem about a significant person in your life.\", \"Write advice you would give to your younger self.\", \"Describe your experience of traveling somewhere.\", \"Recall a favorite holiday memory.\", \"Create a gallery of your heart in a poem.\", \"Describe a strange dream you've had.\", \"Write about a time your illusions were shattered.\", \"Write about a favorite childhood memory.\", \"Imagine yourself as a home under renovation.\", \"Write a haiku about nature.\", \"Observe another time period in a poem.\", \"Write from your pet's perspective.\", \"Imagine switching places with someone for a day.\", \"Write about body positivity.\", \"Freeze a special moment in time through poetry.\", \"Describe an inner dialogue during a run.\", \"Write about yourself as both hero and villain.\"];","map":{"version":3,"names":["syllable","capitalize","str","charAt","toUpperCase","slice","toLowerCase","validatePoem","style","poemText","lines","trim","split","filter","line","length","syllableCounts","map","calculateDoomScale","poem","words","word","darkWords","Set","darkWordCount","has","rhymeScore","lastTwoLetters","i","j","wordVarietyScore","size","dramaticPunctuation","match","darkWordFactor","rhymeFactor","varietyFactor","punctuationFactor","Math","min","doomScale","max","round","POEM_STYLES","POEM_PROMPTS"],"sources":["/Users/danielchayes/liz-poetry/src/utils/poemUtils.js"],"sourcesContent":["import { syllable } from 'syllable';\n\nexport const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n\nexport const validatePoem = (style, poemText) => {\n  const lines = poemText.trim().split(\"\\n\").filter(line => line.trim() !== \"\");\n\n  switch (style) {\n    case \"Haiku\":\n      if (lines.length !== 3) {\n        return \"A haiku should have exactly three lines.\";\n      }\n      const syllableCounts = lines.map(line => syllable(line));\n      if (syllableCounts[0] !== 5 || syllableCounts[1] !== 7 || syllableCounts[2] !== 5) {\n        return \"Haiku lines should have 5, 7, and 5 syllables respectively.\";\n      }\n      return \"This poem structure looks like a Haiku!\";\n\n    case \"Sonnet\":\n      if (lines.length !== 14) {\n        return \"A sonnet should have exactly 14 lines.\";\n      }\n      // Add more sophisticated validation for iambic pentameter if desired\n      return \"This poem has the correct number of lines for a Sonnet.\";\n\n    case \"Limerick\":\n      if (lines.length !== 5) {\n        return \"A limerick should have exactly 5 lines.\";\n      }\n      // Add rhyme scheme validation if desired\n      return \"This poem has the correct number of lines for a Limerick.\";\n\n    default:\n      return `\"${style}\" has no strict rules, write freely!`;\n  }\n};\n\nexport const calculateDoomScale = (poem) => {\n  if (!poem) return 0;\n  \n  const words = poem.toLowerCase().split(/\\s+/).filter(word => word !== \"\");\n  if (words.length === 0) return 0;\n\n  // Calculate various factors that contribute to \"doom\"\n  const darkWords = new Set(['dark', 'death', 'doom', 'gloom', 'night', 'shadow', 'black', 'abyss', 'void', 'lost']);\n  const darkWordCount = words.filter(word => darkWords.has(word)).length;\n  \n  // Rhyme detection\n  let rhymeScore = 0;\n  const lastTwoLetters = words.map(word => word.slice(-2));\n  for (let i = 0; i < lastTwoLetters.length; i++) {\n    for (let j = i + 1; j < lastTwoLetters.length; j++) {\n      if (lastTwoLetters[i] && lastTwoLetters[j] && lastTwoLetters[i] === lastTwoLetters[j]) {\n        rhymeScore++;\n      }\n    }\n  }\n\n  // Word variety (repetition adds to doom)\n  const wordVarietyScore = 1 - (new Set(words).size / words.length);\n  \n  // Punctuation analysis (more exclamation/question marks = more dramatic = more doom)\n  const dramaticPunctuation = (poem.match(/[!?]/g) || []).length;\n  \n  // Calculate final doom score\n  const darkWordFactor = (darkWordCount / words.length) * 40;\n  const rhymeFactor = (rhymeScore / words.length) * 20;\n  const varietyFactor = wordVarietyScore * 20;\n  const punctuationFactor = Math.min(dramaticPunctuation * 5, 20);\n\n  const doomScale = darkWordFactor + rhymeFactor + varietyFactor + punctuationFactor;\n  \n  return Math.min(100, Math.max(0, Math.round(doomScale)));\n};\n\nexport const POEM_STYLES = [\n  \"Haiku\",\n  \"Sonnet\",\n  \"Limerick\",\n  \"Free Verse\",\n  \"Ode\",\n  \"Villanelle\",\n  \"Elegy\",\n  \"Ballad\",\n  \"Epigram\",\n  \"Acrostic\"\n];\n\nexport const POEM_PROMPTS = [\n  \"Choose one of your five senses and write a poem that focuses on it.\",\n  \"Write a poem inspired by a color.\",\n  \"Write about something that happened to you this week.\",\n  \"Write a poem inspired by your favorite song.\",\n  \"Write about a lesson you recently learned.\",\n  \"Write a poem about a significant person in your life.\",\n  \"Write advice you would give to your younger self.\",\n  \"Describe your experience of traveling somewhere.\",\n  \"Recall a favorite holiday memory.\",\n  \"Create a gallery of your heart in a poem.\",\n  \"Describe a strange dream you've had.\",\n  \"Write about a time your illusions were shattered.\",\n  \"Write about a favorite childhood memory.\",\n  \"Imagine yourself as a home under renovation.\",\n  \"Write a haiku about nature.\",\n  \"Observe another time period in a poem.\",\n  \"Write from your pet's perspective.\",\n  \"Imagine switching places with someone for a day.\",\n  \"Write about body positivity.\",\n  \"Freeze a special moment in time through poetry.\",\n  \"Describe an inner dialogue during a run.\",\n  \"Write about yourself as both hero and villain.\"\n]; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}