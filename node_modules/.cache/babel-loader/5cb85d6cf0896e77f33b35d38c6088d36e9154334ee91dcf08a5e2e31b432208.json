{"ast":null,"code":"import{syllable}from'syllable';export const capitalize=str=>str.charAt(0).toUpperCase()+str.slice(1).toLowerCase();export const validatePoem=(style,poemText)=>{const lines=poemText.trim().split(\"\\n\").filter(line=>line.trim()!==\"\");switch(style){case\"Haiku\":if(lines.length!==3){return\"A haiku should have exactly three lines.\";}const syllableCounts=lines.map(line=>syllable(line));if(syllableCounts[0]!==5||syllableCounts[1]!==7||syllableCounts[2]!==5){return\"Haiku lines should have 5, 7, and 5 syllables respectively.\";}return\"This poem structure looks like a Haiku!\";case\"Sonnet\":if(lines.length!==14){return\"A sonnet should have exactly 14 lines.\";}// Add more sophisticated validation for iambic pentameter if desired\nreturn\"This poem has the correct number of lines for a Sonnet.\";case\"Limerick\":if(lines.length!==5){return\"A limerick should have exactly 5 lines.\";}// Add rhyme scheme validation if desired\nreturn\"This poem has the correct number of lines for a Limerick.\";default:return\"\\\"\".concat(style,\"\\\" has no strict rules, write freely!\");}};export const calculateDoomScale=poem=>{if(!poem)return 0;const words=poem.toLowerCase().split(/\\s+/).filter(word=>word!==\"\");if(words.length===0)return 0;// Calculate various factors that contribute to \"doom\"\nconst darkWords=new Set(['dark','death','doom','gloom','night','shadow','black','abyss','void','lost']);const darkWordCount=words.filter(word=>darkWords.has(word)).length;// Rhyme detection\nlet rhymeScore=0;const lastTwoLetters=words.map(word=>word.slice(-2));for(let i=0;i<lastTwoLetters.length;i++){for(let j=i+1;j<lastTwoLetters.length;j++){if(lastTwoLetters[i]&&lastTwoLetters[j]&&lastTwoLetters[i]===lastTwoLetters[j]){rhymeScore++;}}}// Word variety (repetition adds to doom)\nconst wordVarietyScore=1-new Set(words).size/words.length;// Punctuation analysis (more exclamation/question marks = more dramatic = more doom)\nconst dramaticPunctuation=(poem.match(/[!?]/g)||[]).length;// Calculate final doom score\nconst darkWordFactor=darkWordCount/words.length*40;const rhymeFactor=rhymeScore/words.length*20;const varietyFactor=wordVarietyScore*20;const punctuationFactor=Math.min(dramaticPunctuation*5,20);const doomScale=darkWordFactor+rhymeFactor+varietyFactor+punctuationFactor;return Math.min(100,Math.max(0,Math.round(doomScale)));};export const POEM_STYLES=[\"Haiku\",\"Sonnet\",\"Limerick\",\"Free Verse\",\"Ode\",\"Villanelle\",\"Elegy\",\"Ballad\",\"Epigram\",\"Acrostic\"];export const POEM_PROMPTS=[\"Choose one of your five senses and write a poem that focuses on it.\",\"Write a poem inspired by a color.\",\"Write about something that happened to you this week.\",\"Write a poem inspired by your favorite song.\",\"Write about a lesson you recently learned.\",\"Write a poem about a significant person in your life.\",\"Write advice you would give to your younger self.\",\"Describe your experience of traveling somewhere.\",\"Recall a favorite holiday memory.\",\"Create a gallery of your heart in a poem.\",\"Describe a strange dream you've had.\",\"Write about a time your illusions were shattered.\",\"Write about a favorite childhood memory.\",\"Imagine yourself as a home under renovation.\",\"Write a haiku about nature.\",\"Observe another time period in a poem.\",\"Write from your pet's perspective.\",\"Imagine switching places with someone for a day.\",\"Write about body positivity.\",\"Freeze a special moment in time through poetry.\",\"Describe an inner dialogue during a run.\",\"Write about yourself as both hero and villain.\"];","map":{"version":3,"names":["syllable","capitalize","str","charAt","toUpperCase","slice","toLowerCase","validatePoem","style","poemText","lines","trim","split","filter","line","length","syllableCounts","map","concat","calculateDoomScale","poem","words","word","darkWords","Set","darkWordCount","has","rhymeScore","lastTwoLetters","i","j","wordVarietyScore","size","dramaticPunctuation","match","darkWordFactor","rhymeFactor","varietyFactor","punctuationFactor","Math","min","doomScale","max","round","POEM_STYLES","POEM_PROMPTS"],"sources":["/Users/danielchayes/liz-poetry/src/utils/poemUtils.js"],"sourcesContent":["import { syllable } from 'syllable';\n\nexport const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n\nexport const validatePoem = (style, poemText) => {\n  const lines = poemText.trim().split(\"\\n\").filter(line => line.trim() !== \"\");\n\n  switch (style) {\n    case \"Haiku\":\n      if (lines.length !== 3) {\n        return \"A haiku should have exactly three lines.\";\n      }\n      const syllableCounts = lines.map(line => syllable(line));\n      if (syllableCounts[0] !== 5 || syllableCounts[1] !== 7 || syllableCounts[2] !== 5) {\n        return \"Haiku lines should have 5, 7, and 5 syllables respectively.\";\n      }\n      return \"This poem structure looks like a Haiku!\";\n\n    case \"Sonnet\":\n      if (lines.length !== 14) {\n        return \"A sonnet should have exactly 14 lines.\";\n      }\n      // Add more sophisticated validation for iambic pentameter if desired\n      return \"This poem has the correct number of lines for a Sonnet.\";\n\n    case \"Limerick\":\n      if (lines.length !== 5) {\n        return \"A limerick should have exactly 5 lines.\";\n      }\n      // Add rhyme scheme validation if desired\n      return \"This poem has the correct number of lines for a Limerick.\";\n\n    default:\n      return `\"${style}\" has no strict rules, write freely!`;\n  }\n};\n\nexport const calculateDoomScale = (poem) => {\n  if (!poem) return 0;\n  \n  const words = poem.toLowerCase().split(/\\s+/).filter(word => word !== \"\");\n  if (words.length === 0) return 0;\n\n  // Calculate various factors that contribute to \"doom\"\n  const darkWords = new Set(['dark', 'death', 'doom', 'gloom', 'night', 'shadow', 'black', 'abyss', 'void', 'lost']);\n  const darkWordCount = words.filter(word => darkWords.has(word)).length;\n  \n  // Rhyme detection\n  let rhymeScore = 0;\n  const lastTwoLetters = words.map(word => word.slice(-2));\n  for (let i = 0; i < lastTwoLetters.length; i++) {\n    for (let j = i + 1; j < lastTwoLetters.length; j++) {\n      if (lastTwoLetters[i] && lastTwoLetters[j] && lastTwoLetters[i] === lastTwoLetters[j]) {\n        rhymeScore++;\n      }\n    }\n  }\n\n  // Word variety (repetition adds to doom)\n  const wordVarietyScore = 1 - (new Set(words).size / words.length);\n  \n  // Punctuation analysis (more exclamation/question marks = more dramatic = more doom)\n  const dramaticPunctuation = (poem.match(/[!?]/g) || []).length;\n  \n  // Calculate final doom score\n  const darkWordFactor = (darkWordCount / words.length) * 40;\n  const rhymeFactor = (rhymeScore / words.length) * 20;\n  const varietyFactor = wordVarietyScore * 20;\n  const punctuationFactor = Math.min(dramaticPunctuation * 5, 20);\n\n  const doomScale = darkWordFactor + rhymeFactor + varietyFactor + punctuationFactor;\n  \n  return Math.min(100, Math.max(0, Math.round(doomScale)));\n};\n\nexport const POEM_STYLES = [\n  \"Haiku\",\n  \"Sonnet\",\n  \"Limerick\",\n  \"Free Verse\",\n  \"Ode\",\n  \"Villanelle\",\n  \"Elegy\",\n  \"Ballad\",\n  \"Epigram\",\n  \"Acrostic\"\n];\n\nexport const POEM_PROMPTS = [\n  \"Choose one of your five senses and write a poem that focuses on it.\",\n  \"Write a poem inspired by a color.\",\n  \"Write about something that happened to you this week.\",\n  \"Write a poem inspired by your favorite song.\",\n  \"Write about a lesson you recently learned.\",\n  \"Write a poem about a significant person in your life.\",\n  \"Write advice you would give to your younger self.\",\n  \"Describe your experience of traveling somewhere.\",\n  \"Recall a favorite holiday memory.\",\n  \"Create a gallery of your heart in a poem.\",\n  \"Describe a strange dream you've had.\",\n  \"Write about a time your illusions were shattered.\",\n  \"Write about a favorite childhood memory.\",\n  \"Imagine yourself as a home under renovation.\",\n  \"Write a haiku about nature.\",\n  \"Observe another time period in a poem.\",\n  \"Write from your pet's perspective.\",\n  \"Imagine switching places with someone for a day.\",\n  \"Write about body positivity.\",\n  \"Freeze a special moment in time through poetry.\",\n  \"Describe an inner dialogue during a run.\",\n  \"Write about yourself as both hero and villain.\"\n]; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}