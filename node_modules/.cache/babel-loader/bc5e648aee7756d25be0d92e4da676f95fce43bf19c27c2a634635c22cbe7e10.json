{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return factory(global, global.document);\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = factory(global, global.document);\n  } else {\n    global.normalize = factory(global, global.document);\n  }\n})(typeof window !== 'undefined' ? window : this, function (window, document) {\n  var charmap = require('./charmap.json');\n  var regex = null;\n  var current_charmap;\n  var old_charmap;\n  function normalize(str, custom_charmap) {\n    old_charmap = current_charmap;\n    current_charmap = custom_charmap || charmap;\n    regex = regex && old_charmap === current_charmap ? regex : buildRegExp(current_charmap);\n    return str.replace(regex, function (charToReplace) {\n      return current_charmap[charToReplace.charCodeAt(0)] || charToReplace;\n    });\n  }\n  function buildRegExp(charmap) {\n    return new RegExp('[' + Object.keys(charmap).map(function (code) {\n      return String.fromCharCode(code);\n    }).join(' ') + ']', 'g');\n  }\n  return normalize;\n});","map":{"version":3,"names":["global","factory","define","amd","document","module","exports","normalize","window","charmap","require","regex","current_charmap","old_charmap","str","custom_charmap","buildRegExp","replace","charToReplace","charCodeAt","RegExp","Object","keys","map","code","String","fromCharCode","join"],"sources":["/Users/danielchayes/liz-poetry/node_modules/normalize-strings/index.js"],"sourcesContent":["(function(global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(function() {\n      return factory(global, global.document);\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = factory(global, global.document);\n  } else {\n      global.normalize = factory(global, global.document);\n  }\n} (typeof window !== 'undefined' ? window : this, function (window, document) {\n  var charmap = require('./charmap.json');\n  var regex = null;\n  var current_charmap;\n  var old_charmap;\n\n  function normalize(str, custom_charmap) {\n    old_charmap = current_charmap;\n    current_charmap = custom_charmap || charmap;\n\n    regex = (regex && old_charmap === current_charmap) ? regex : buildRegExp(current_charmap);\n\n    return str.replace(regex, function(charToReplace) {\n      return current_charmap[charToReplace.charCodeAt(0)] || charToReplace;\n    });\n  }\n\n  function buildRegExp(charmap){\n     return new RegExp('[' + Object.keys(charmap).map(function(code) {return String.fromCharCode(code); }).join(' ') + ']', 'g');\n   }\n\n  return normalize;\n}));\n"],"mappings":"AAAC,WAASA,MAAM,EAAEC,OAAO,EAAE;EACzB,IAAI,OAAOC,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACC,GAAG,EAAE;IAC9CD,MAAM,CAAC,YAAW;MAChB,OAAOD,OAAO,CAACD,MAAM,EAAEA,MAAM,CAACI,QAAQ,CAAC;IACzC,CAAC,CAAC;EACJ,CAAC,MAAM,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,OAAO,EAAE;IAC1DD,MAAM,CAACC,OAAO,GAAGL,OAAO,CAACD,MAAM,EAAEA,MAAM,CAACI,QAAQ,CAAC;EACnD,CAAC,MAAM;IACHJ,MAAM,CAACO,SAAS,GAAGN,OAAO,CAACD,MAAM,EAAEA,MAAM,CAACI,QAAQ,CAAC;EACvD;AACF,CAAC,EAAE,OAAOI,MAAM,KAAK,WAAW,GAAGA,MAAM,GAAG,IAAI,EAAE,UAAUA,MAAM,EAAEJ,QAAQ,EAAE;EAC5E,IAAIK,OAAO,GAAGC,OAAO,CAAC,gBAAgB,CAAC;EACvC,IAAIC,KAAK,GAAG,IAAI;EAChB,IAAIC,eAAe;EACnB,IAAIC,WAAW;EAEf,SAASN,SAASA,CAACO,GAAG,EAAEC,cAAc,EAAE;IACtCF,WAAW,GAAGD,eAAe;IAC7BA,eAAe,GAAGG,cAAc,IAAIN,OAAO;IAE3CE,KAAK,GAAIA,KAAK,IAAIE,WAAW,KAAKD,eAAe,GAAID,KAAK,GAAGK,WAAW,CAACJ,eAAe,CAAC;IAEzF,OAAOE,GAAG,CAACG,OAAO,CAACN,KAAK,EAAE,UAASO,aAAa,EAAE;MAChD,OAAON,eAAe,CAACM,aAAa,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAID,aAAa;IACtE,CAAC,CAAC;EACJ;EAEA,SAASF,WAAWA,CAACP,OAAO,EAAC;IAC1B,OAAO,IAAIW,MAAM,CAAC,GAAG,GAAGC,MAAM,CAACC,IAAI,CAACb,OAAO,CAAC,CAACc,GAAG,CAAC,UAASC,IAAI,EAAE;MAAC,OAAOC,MAAM,CAACC,YAAY,CAACF,IAAI,CAAC;IAAE,CAAC,CAAC,CAACG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC;EAC7H;EAED,OAAOpB,SAAS;AAClB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}