{"ast":null,"code":"import pluralize from 'pluralize';\n// @ts-ignore remove when typed.\nimport normalize from 'normalize-strings';\nimport { problematic } from './problematic.js';\nconst own = {}.hasOwnProperty;\n\n// Two expressions of occurrences which normally would be counted as two\n// syllables, but should be counted as one.\nconst EXPRESSION_MONOSYLLABIC_ONE = new RegExp(['awe($|d|so)', 'cia(?:l|$)', 'tia', 'cius', 'cious', '[^aeiou]giu', '[aeiouy][^aeiouy]ion', 'iou', 'sia$', 'eous$', '[oa]gue$', '.[^aeiuoycgltdb]{2,}ed$', '.ely$', '^jua', 'uai', 'eau', '^busi$', '(?:[aeiouy](?:' + ['[bcfgklmnprsvwxyz]', 'ch', 'dg', 'g[hn]', 'lch', 'l[lv]', 'mm', 'nch', 'n[cgn]', 'r[bcnsv]', 'squ', 's[chkls]', 'th'].join('|') + ')ed$)', '(?:[aeiouy](?:' + ['[bdfklmnprstvy]', 'ch', 'g[hn]', 'lch', 'l[lv]', 'mm', 'nch', 'nn', 'r[nsv]', 'squ', 's[cklst]', 'th'].join('|') + ')es$)'].join('|'), 'g');\nconst EXPRESSION_MONOSYLLABIC_TWO = new RegExp('[aeiouy](?:' + ['[bcdfgklmnprstvyz]', 'ch', 'dg', 'g[hn]', 'l[lv]', 'mm', 'n[cgns]', 'r[cnsv]', 'squ', 's[cklst]', 'th'].join('|') + ')e$', 'g');\n\n// Four expression of occurrences which normally would be counted as one\n// syllable, but should be counted as two.\nconst EXPRESSION_DOUBLE_SYLLABIC_ONE = new RegExp('(?:' + ['([^aeiouy])\\\\1l', '[^aeiouy]ie(?:r|s?t)', '[aeiouym]bl', 'eo', 'ism', 'asm', 'thm', 'dnt', 'snt', 'uity', 'dea', 'gean', 'oa', 'ua', 'react?', 'orbed',\n// Cancel `'.[^aeiuoycgltdb]{2,}ed$',`\n'shred',\n// Cancel `'.[^aeiuoycgltdb]{2,}ed$',`\n'eings?', '[aeiouy]sh?e[rs]'].join('|') + ')$', 'g');\nconst EXPRESSION_DOUBLE_SYLLABIC_TWO = new RegExp(['creat(?!u)', '[^gq]ua[^auieo]', '[aeiou]{3}', '^(?:ia|mc|coa[dglx].)', '^re(app|es|im|us)', '(th|d)eist'].join('|'), 'g');\nconst EXPRESSION_DOUBLE_SYLLABIC_THREE = new RegExp(['[^aeiou]y[ae]', '[^l]lien', 'riet', 'dien', 'iu', 'io', 'ii', 'uen', '[aeilotu]real', 'real[aeilotu]', 'iell', 'eo[^aeiou]', '[aeiou]y[aeiou]'].join('|'), 'g');\nconst EXPRESSION_DOUBLE_SYLLABIC_FOUR = /[^s]ia/;\n\n// Expression to match single syllable pre- and suffixes.\nconst EXPRESSION_SINGLE = new RegExp(['^(?:' + ['un', 'fore', 'ware', 'none?', 'out', 'post', 'sub', 'pre', 'pro', 'dis', 'side', 'some'].join('|') + ')', '(?:' + ['ly', 'less', 'some', 'ful', 'ers?', 'ness', 'cians?', 'ments?', 'ettes?', 'villes?', 'ships?', 'sides?', 'ports?', 'shires?', '[gnst]ion(?:ed|s)?'].join('|') + ')$'].join('|'), 'g');\n\n// Expression to match double syllable pre- and suffixes.\nconst EXPRESSION_DOUBLE = new RegExp(['^' + '(?:' + ['above', 'anti', 'ante', 'counter', 'hyper', 'afore', 'agri', 'infra', 'intra', 'inter', 'over', 'semi', 'ultra', 'under', 'extra', 'dia', 'micro', 'mega', 'kilo', 'pico', 'nano', 'macro', 'somer'].join('|') + ')', '(?:fully|berry|woman|women|edly|union|((?:[bcdfghjklmnpqrstvwxz])|[aeiou])ye?ing)$'].join('|'), 'g');\n\n// Expression to match triple syllable suffixes.\nconst EXPRESSION_TRIPLE = /(creations?|ology|ologist|onomy|onomist)$/g;\n\n/**\n * Count syllables in `value`.\n *\n * @param {string} value\n *   Value to check.\n * @returns {number}\n *   Syllables in `value`.\n */\nexport function syllable(value) {\n  const values = normalize(String(value)).toLowerCase()\n  // Remove apostrophes.\n  .replace(/['â€™]/g, '')\n  // Split on word boundaries.\n  .split(/\\b/g);\n  let index = -1;\n  let sum = 0;\n  while (++index < values.length) {\n    // Remove non-alphabetic characters from a given value.\n    sum += one(values[index].replace(/[^a-z]/g, ''));\n  }\n  return sum;\n}\n\n/**\n * Get syllables in a word.\n *\n * @param {string} value\n * @returns {number}\n */\nfunction one(value) {\n  let count = 0;\n  if (value.length === 0) {\n    return count;\n  }\n\n  // Return early when possible.\n  if (value.length < 3) {\n    return 1;\n  }\n\n  // If `value` is a hard to count, it might be in `problematic`.\n  if (own.call(problematic, value)) {\n    return problematic[value];\n  }\n\n  // Additionally, the singular word might be in `problematic`.\n  const singular = pluralize(value, 1);\n  if (own.call(problematic, singular)) {\n    return problematic[singular];\n  }\n  const addOne = returnFactory(1);\n  const subtractOne = returnFactory(-1);\n\n  // Count some prefixes and suffixes, and remove their matched ranges.\n  value = value.replace(EXPRESSION_TRIPLE, countFactory(3)).replace(EXPRESSION_DOUBLE, countFactory(2)).replace(EXPRESSION_SINGLE, countFactory(1));\n\n  // Count multiple consonants.\n  const parts = value.split(/[^aeiouy]+/);\n  let index = -1;\n  while (++index < parts.length) {\n    if (parts[index] !== '') {\n      count++;\n    }\n  }\n\n  // Subtract one for occurrences which should be counted as one (but are\n  // counted as two).\n  value.replace(EXPRESSION_MONOSYLLABIC_ONE, subtractOne).replace(EXPRESSION_MONOSYLLABIC_TWO, subtractOne);\n\n  // Add one for occurrences which should be counted as two (but are counted as\n  // one).\n  value.replace(EXPRESSION_DOUBLE_SYLLABIC_ONE, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_TWO, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_THREE, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_FOUR, addOne);\n\n  // Make sure at least on is returned.\n  return count || 1;\n\n  /**\n   * Define scoped counters, to be used in `String#replace()` calls.\n   * The scoped counter removes the matched value from the input.\n   *\n   * @param {number} addition\n   */\n  function countFactory(addition) {\n    return counter;\n    /**\n     * @returns {string}\n     */\n    function counter() {\n      count += addition;\n      return '';\n    }\n  }\n\n  /**\n   * This scoped counter does not remove the matched value from the input.\n   *\n   * @param {number} addition\n   */\n  function returnFactory(addition) {\n    return returner;\n    /**\n     * @param {string} $0\n     * @returns {string}\n     */\n    function returner($0) {\n      count += addition;\n      return $0;\n    }\n  }\n}","map":{"version":3,"names":["pluralize","normalize","problematic","own","hasOwnProperty","EXPRESSION_MONOSYLLABIC_ONE","RegExp","join","EXPRESSION_MONOSYLLABIC_TWO","EXPRESSION_DOUBLE_SYLLABIC_ONE","EXPRESSION_DOUBLE_SYLLABIC_TWO","EXPRESSION_DOUBLE_SYLLABIC_THREE","EXPRESSION_DOUBLE_SYLLABIC_FOUR","EXPRESSION_SINGLE","EXPRESSION_DOUBLE","EXPRESSION_TRIPLE","syllable","value","values","String","toLowerCase","replace","split","index","sum","length","one","count","call","singular","addOne","returnFactory","subtractOne","countFactory","parts","addition","counter","returner","$0"],"sources":["/Users/danielchayes/liz-poetry/node_modules/syllable/index.js"],"sourcesContent":["import pluralize from 'pluralize'\n// @ts-ignore remove when typed.\nimport normalize from 'normalize-strings'\nimport {problematic} from './problematic.js'\n\nconst own = {}.hasOwnProperty\n\n// Two expressions of occurrences which normally would be counted as two\n// syllables, but should be counted as one.\nconst EXPRESSION_MONOSYLLABIC_ONE = new RegExp(\n  [\n    'awe($|d|so)',\n    'cia(?:l|$)',\n    'tia',\n    'cius',\n    'cious',\n    '[^aeiou]giu',\n    '[aeiouy][^aeiouy]ion',\n    'iou',\n    'sia$',\n    'eous$',\n    '[oa]gue$',\n    '.[^aeiuoycgltdb]{2,}ed$',\n    '.ely$',\n    '^jua',\n    'uai',\n    'eau',\n    '^busi$',\n    '(?:[aeiouy](?:' +\n      [\n        '[bcfgklmnprsvwxyz]',\n        'ch',\n        'dg',\n        'g[hn]',\n        'lch',\n        'l[lv]',\n        'mm',\n        'nch',\n        'n[cgn]',\n        'r[bcnsv]',\n        'squ',\n        's[chkls]',\n        'th'\n      ].join('|') +\n      ')ed$)',\n    '(?:[aeiouy](?:' +\n      [\n        '[bdfklmnprstvy]',\n        'ch',\n        'g[hn]',\n        'lch',\n        'l[lv]',\n        'mm',\n        'nch',\n        'nn',\n        'r[nsv]',\n        'squ',\n        's[cklst]',\n        'th'\n      ].join('|') +\n      ')es$)'\n  ].join('|'),\n  'g'\n)\n\nconst EXPRESSION_MONOSYLLABIC_TWO = new RegExp(\n  '[aeiouy](?:' +\n    [\n      '[bcdfgklmnprstvyz]',\n      'ch',\n      'dg',\n      'g[hn]',\n      'l[lv]',\n      'mm',\n      'n[cgns]',\n      'r[cnsv]',\n      'squ',\n      's[cklst]',\n      'th'\n    ].join('|') +\n    ')e$',\n  'g'\n)\n\n// Four expression of occurrences which normally would be counted as one\n// syllable, but should be counted as two.\nconst EXPRESSION_DOUBLE_SYLLABIC_ONE = new RegExp(\n  '(?:' +\n    [\n      '([^aeiouy])\\\\1l',\n      '[^aeiouy]ie(?:r|s?t)',\n      '[aeiouym]bl',\n      'eo',\n      'ism',\n      'asm',\n      'thm',\n      'dnt',\n      'snt',\n      'uity',\n      'dea',\n      'gean',\n      'oa',\n      'ua',\n      'react?',\n      'orbed', // Cancel `'.[^aeiuoycgltdb]{2,}ed$',`\n      'shred', // Cancel `'.[^aeiuoycgltdb]{2,}ed$',`\n      'eings?',\n      '[aeiouy]sh?e[rs]'\n    ].join('|') +\n    ')$',\n  'g'\n)\n\nconst EXPRESSION_DOUBLE_SYLLABIC_TWO = new RegExp(\n  [\n    'creat(?!u)',\n    '[^gq]ua[^auieo]',\n    '[aeiou]{3}',\n    '^(?:ia|mc|coa[dglx].)',\n    '^re(app|es|im|us)',\n    '(th|d)eist'\n  ].join('|'),\n  'g'\n)\n\nconst EXPRESSION_DOUBLE_SYLLABIC_THREE = new RegExp(\n  [\n    '[^aeiou]y[ae]',\n    '[^l]lien',\n    'riet',\n    'dien',\n    'iu',\n    'io',\n    'ii',\n    'uen',\n    '[aeilotu]real',\n    'real[aeilotu]',\n    'iell',\n    'eo[^aeiou]',\n    '[aeiou]y[aeiou]'\n  ].join('|'),\n  'g'\n)\n\nconst EXPRESSION_DOUBLE_SYLLABIC_FOUR = /[^s]ia/\n\n// Expression to match single syllable pre- and suffixes.\nconst EXPRESSION_SINGLE = new RegExp(\n  [\n    '^(?:' +\n      [\n        'un',\n        'fore',\n        'ware',\n        'none?',\n        'out',\n        'post',\n        'sub',\n        'pre',\n        'pro',\n        'dis',\n        'side',\n        'some'\n      ].join('|') +\n      ')',\n    '(?:' +\n      [\n        'ly',\n        'less',\n        'some',\n        'ful',\n        'ers?',\n        'ness',\n        'cians?',\n        'ments?',\n        'ettes?',\n        'villes?',\n        'ships?',\n        'sides?',\n        'ports?',\n        'shires?',\n        '[gnst]ion(?:ed|s)?'\n      ].join('|') +\n      ')$'\n  ].join('|'),\n  'g'\n)\n\n// Expression to match double syllable pre- and suffixes.\nconst EXPRESSION_DOUBLE = new RegExp(\n  [\n    '^' +\n      '(?:' +\n      [\n        'above',\n        'anti',\n        'ante',\n        'counter',\n        'hyper',\n        'afore',\n        'agri',\n        'infra',\n        'intra',\n        'inter',\n        'over',\n        'semi',\n        'ultra',\n        'under',\n        'extra',\n        'dia',\n        'micro',\n        'mega',\n        'kilo',\n        'pico',\n        'nano',\n        'macro',\n        'somer'\n      ].join('|') +\n      ')',\n    '(?:fully|berry|woman|women|edly|union|((?:[bcdfghjklmnpqrstvwxz])|[aeiou])ye?ing)$'\n  ].join('|'),\n  'g'\n)\n\n// Expression to match triple syllable suffixes.\nconst EXPRESSION_TRIPLE = /(creations?|ology|ologist|onomy|onomist)$/g\n\n/**\n * Count syllables in `value`.\n *\n * @param {string} value\n *   Value to check.\n * @returns {number}\n *   Syllables in `value`.\n */\nexport function syllable(value) {\n  const values = normalize(String(value))\n    .toLowerCase()\n    // Remove apostrophes.\n    .replace(/['â€™]/g, '')\n    // Split on word boundaries.\n    .split(/\\b/g)\n  let index = -1\n  let sum = 0\n\n  while (++index < values.length) {\n    // Remove non-alphabetic characters from a given value.\n    sum += one(values[index].replace(/[^a-z]/g, ''))\n  }\n\n  return sum\n}\n\n/**\n * Get syllables in a word.\n *\n * @param {string} value\n * @returns {number}\n */\nfunction one(value) {\n  let count = 0\n\n  if (value.length === 0) {\n    return count\n  }\n\n  // Return early when possible.\n  if (value.length < 3) {\n    return 1\n  }\n\n  // If `value` is a hard to count, it might be in `problematic`.\n  if (own.call(problematic, value)) {\n    return problematic[value]\n  }\n\n  // Additionally, the singular word might be in `problematic`.\n  const singular = pluralize(value, 1)\n\n  if (own.call(problematic, singular)) {\n    return problematic[singular]\n  }\n\n  const addOne = returnFactory(1)\n  const subtractOne = returnFactory(-1)\n\n  // Count some prefixes and suffixes, and remove their matched ranges.\n  value = value\n    .replace(EXPRESSION_TRIPLE, countFactory(3))\n    .replace(EXPRESSION_DOUBLE, countFactory(2))\n    .replace(EXPRESSION_SINGLE, countFactory(1))\n\n  // Count multiple consonants.\n  const parts = value.split(/[^aeiouy]+/)\n  let index = -1\n\n  while (++index < parts.length) {\n    if (parts[index] !== '') {\n      count++\n    }\n  }\n\n  // Subtract one for occurrences which should be counted as one (but are\n  // counted as two).\n  value\n    .replace(EXPRESSION_MONOSYLLABIC_ONE, subtractOne)\n    .replace(EXPRESSION_MONOSYLLABIC_TWO, subtractOne)\n\n  // Add one for occurrences which should be counted as two (but are counted as\n  // one).\n  value\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_ONE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_TWO, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_THREE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_FOUR, addOne)\n\n  // Make sure at least on is returned.\n  return count || 1\n\n  /**\n   * Define scoped counters, to be used in `String#replace()` calls.\n   * The scoped counter removes the matched value from the input.\n   *\n   * @param {number} addition\n   */\n  function countFactory(addition) {\n    return counter\n    /**\n     * @returns {string}\n     */\n    function counter() {\n      count += addition\n      return ''\n    }\n  }\n\n  /**\n   * This scoped counter does not remove the matched value from the input.\n   *\n   * @param {number} addition\n   */\n  function returnFactory(addition) {\n    return returner\n    /**\n     * @param {string} $0\n     * @returns {string}\n     */\n    function returner($0) {\n      count += addition\n      return $0\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}